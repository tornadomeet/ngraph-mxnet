# *******************************************************************************
# * Copyright 2018 Intel Corporation
# *
# * Licensed under the Apache License, Version 2.0 (the "License");
# * you may not use this file except in compliance with the License.
# * You may obtain a copy of the License at
# *
# *     http://www.apache.org/licenses/LICENSE-2.0
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS,
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# * See the License for the specific language governing permissions and
# * limitations under the License.
# ********************************************************************************

# Environment to build and run unit tests for ngraph-mxnet on ubuntu1604
# with gcc 5.4 by defaul
# with clang 3.9
# with capabilities for python 2.7 and python 3
# Author: Lam Nguyen


FROM ubuntu:16.04

#Set up environment variables:
ENV ftp_proxy="http://proxy-us.intel.com:911"
ENV no_proxy="localhost,127.0.0.1,intel.com,.intel.com,cluster,.cluster,10.0.0.0/8,172.168.0.0/16,192.168.0.0/16,nervana-dockrepo01.fm.intel.com,nervana.ai"
ENV socks_proxy="socks://proxy-us.intel.com:1080"

#Install MxNet Dependencies:
RUN apt-get update && apt-get install -y build-essential git \
        libopencv-dev \
        curl \
        gcc \
        libatlas-base-dev \
        python \
        python-pip \
        python-dev \
        python3 \
        python3-pip \
        python3-dev \
        python3-venv \      
        python-opencv \
        graphviz \
        python-scipy \
        python-sklearn \
        libopenblas-dev \
        clang-3.9 \
        clang-format-3.9 \
        virtualenv \
        cmake \
        sudo

RUN pip install --upgrade pip
RUN pip install numpy

# We include psutil
RUN pip install psutil

# We include pytest
RUN pip install --upgrade pytest

# We include pytest-xdist to speed up the testing
RUN pip install pytest-xdist

# Files to source:
#   1. Proxy settings
#   2. OpenMPI settings
#ADD environment-proxy-servers.source /home/environment-proxy-servers.source
#ADD environment-openmpi-ci.source /home/environment-openmpi-ci.source

# We include the OPENMPI
RUN wget http://www.open-mpi.org/software/ompi/v2.1/downloads/openmpi-2.1.1.tar.gz

RUN tar xzvf openmpi-2.1.1.tar.gz

WORKDIR openmpi-2.1.1

RUN ./configure
RUN make -j4
RUN make install
RUN ldconfig

RUN which mpicc
RUN mpicc -show
RUN which mpiexec
RUN mpiexec --version

## Do some testings 
WORKDIR /home/
RUN mkdir OpenMpi
WORKDIR /home/OpenMPi

RUN wget http://www.open-mpi.org/papers/workshop-2006/hello.c

RUN mpicc hello.c -o hello

RUN mpirun --allow-run-as-root -np 4 ./hello

# Copy in the run-as-user.sh script
# This will allow the builds, which are done in a mounted directory, to
# be run as the user who runs "docker run".  This then allows the mounted
# directory to be properly deleted by the user later (e.g. by jenkins).
WORKDIR /home
ADD scripts/run-as-user.sh /home/run-as-user.sh
